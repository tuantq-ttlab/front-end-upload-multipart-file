import React, { Component } from "react";
import axios from "axios";

export default class Index extends Component {
  constructor(props) {
    super(props);
    this.state = {
      fileSelected: null,
      uploadId: "",
      fileName: "",
      backendUrl: "http://localhost:3000",
    };
  }

  async fileHandler(event) {
    try {
      let fileSelected = event.target.files[0];
      let fileName = fileSelected.name;
      this.setState({ fileSelected });
      this.setState({ fileName });
    } catch (err) {
      console.error(err, err.message);
    }
  }

  async startUpload(event) {
    try {
      event.preventDefault();

      const params = {
        videoName: this.state.fileName,
        // fileType: this.state.fileSelected.type,
      };

      let resp = await axios.post(
        `${this.state.backendUrl}/api/shz/get-upload-id`,
        {},
        {
          data: { ...params },
        }
      );
      console.log(resp);
      let { uploadId } = resp.data?.data;
      console.log(uploadId);
      this.setState({ uploadId });
      this.uploadMultipartFile();

      // let resp = await axios.delete(
      //   `${this.state.backendUrl}/api/v1/file/62c3b627d34caccddce9dbad`
      // );
      // console.log(resp)
      // const body = {
      //   fileName: this.state.fileName,
      //   // fileType: this.state.fileSelected.type,
      //   path: "courses",
      // };

      // let resp = await axios.post(
      //   `${this.state.backendUrl}/api/v1/file/presigned-url`,
      //   {
      //     ...body,
      //   }
      // );
      // let { presignedUrl, storageKey, fileName } = resp.data.data;
      // const result = await axios.put(presignedUrl, this.state.fileSelected, {
      //   headers: {
      //     "x-amz-acl": "public-read",
      //     "Content-Type": this.state.fileSelected.type,
      //   },
      // });
      // if (result.status === 200) {
      //   // console.log(this.state.fileSelected);
      //   const lastDot = this.state.fileSelected.name.lastIndexOf(".");
      //   console.log(
      //     JSON.stringify({
      //       originalFileName: this.state.fileSelected.name,
      //       fileName,
      //       size: this.state.fileSelected.size,
      //       extension: this.state.fileSelected.name.substr(lastDot + 1),
      //       mimetype: this.state.fileSelected.type,
      //       storageKey,
      //     })
      //   );
      //   const response = await axios.post(
      //     `${this.state.backendUrl}/api/v1/file`,
      //     {
      //       originalFileName: this.state.fileSelected.name,
      //       fileName,
      //       size: this.state.fileSelected.size,
      //       extension: this.state.fileSelected.name.substr(lastDot + 1),
      //       mimetype: this.state.fileSelected.type,
      //       storageKey,
      //     }
      //   );
      //   console.log("response", response);
      // }

      // let uploadResp = await axios.put(presignedUrl, blob, {
      //   headers: {
      //     "Content-Type": this.state.fileSelected.type,
      //   },
      // });
      // this.setState({ uploadId });
      // this.uploadMultipartFile();
      // event.preventDefault();
      // const params = {
      //   fileName: this.state.fileName,
      //   fileType: this.state.fileSelected.type,
      // };

      // let resp = await axios.get(`${this.state.backendUrl}/start-upload`, {
      //   params,
      // });
      // console.log("resp", resp);
      // let { uploadId } = resp.data;
      // this.setState({ uploadId });
      // this.uploadMultipartFile();
      /**
       event.preventDefault();
      const params = {
        fileName: this.state.fileName,
        fileType: this.state.fileSelected.type,
      };

      // let resp = await axios.get(`${this.state.backendUrl}/start-upload`, {
      //   params,
      // });
      let resp = await axios.get(
        `${this.state.backendUrl}/start-upload-signal`,
        {
          params,
        }
      );
      let { url } = resp.data;
      console.log(url);
      const result = await axios.put(url, this.state.fileSelected, {
        headers: {
          "x-amz-acl": "public-read",
          "Content-Type": this.state.fileSelected.type,
          "Access-Control-Allow-Origin": "*"
        },
      });
      console.log(result)
      // this.setState({ uploadId });
      // this.uploadMultipartFile();
       */
    } catch (err) {
      console.log(err);
    }
  }

  async uploadMultipartFile() {
    try {
      console.log("Inside uploadMultipartFile");
      const CHUNK_SIZE = 1024 * 1000 * 300; // 300MB
      const fileSize = this.state.fileSelected.size;
      const CHUNKS_COUNT = Math.floor(fileSize / CHUNK_SIZE) + 1;
      let promisesArray = [];
      let start, end, blob;
      let uploadPartsArray = [];

      for (let index = 1; index < CHUNKS_COUNT + 1; index++) {
        start = (index - 1) * CHUNK_SIZE;
        end = index * CHUNK_SIZE;
        blob =
          index < CHUNKS_COUNT
            ? this.state.fileSelected.slice(start, end)
            : this.state.fileSelected.slice(start);

        // Get presigned URL for each part
        let getUploadUrlResp = await axios.post(
          `${this.state.backendUrl}/api/shz/get-upload-url`,
          {},
          {
            data: {
              videoName: this.state.fileName,
              partNumber: index,
              uploadId: this.state.uploadId,
            },
          }
        );
        let { url: presignedUrl } = getUploadUrlResp.data.data;
        console.log(presignedUrl);
        // console.log(
        //   "   Presigned URL " +
        //     index +
        //     ": " +
        //     presignedUrl +
        //     " filetype " +
        //     this.state.fileSelected.type
        // );

        // Send part aws server
        let uploadResp = await axios.put(presignedUrl, blob, {
          headers: {
            "Content-Type": this.state.fileSelected.type,
            // "x-amz-acl": "public-read",
          },
        });
        if (uploadResp) {
          // console.log(uploadResp)
          uploadPartsArray.push({
            ETag: uploadResp.headers.etag,
            PartNumber: index,
          });
        }
        // promisesArray.push(uploadResp);v
      }
      console.log(uploadPartsArray);

      // let resolvedArray = await Promise.all(promisesArray);
      // console.log(resolvedArray, " resolvedAr");

      // let uploadPartsArray = [];
      // resolvedArray.forEach((resolvedPromise, index) => {
      //   console.log("resolvedPromise", resolvedPromise);
      //   uploadPartsArray.push({
      //     ETag: resolvedPromise.headers.etag,
      //     PartNumber: index + 1,
      //   });
      // });

      // CompleteMultipartUpload in the backend server
      let completeUploadResp = await axios.post(
        `${this.state.backendUrl}/api/shz/complete-upload`,
        {},
        {
          data: {
            videoName: this.state.fileName,
            parts: uploadPartsArray,
            uploadId: this.state.uploadId,
          },
        }
      );

      console.log(completeUploadResp.data, "complete upload response");
    } catch (err) {
      console.log(err);
    }
  }

  async getData() {
    const resp = await axios.get(
      `${this.state.backendUrl}/api/v1/file/62c3b627d34caccddce9dbad`
    );
    console.log(resp);
  }

  componentDidMount() {
    // this.getData();
  }
  render() {
    return (
      <div style={{ backgroundColor: "grey", height: 1500 }}>
        <form onSubmit={this.startUpload.bind(this)}>
          <div>
            <p>Upload Dataset:</p>
            <input
              type="file"
              id="file"
              onChange={this.fileHandler.bind(this)}
            />
            <button type="submit">Upload</button>
          </div>
        </form>
      </div>
    );
  }
}
