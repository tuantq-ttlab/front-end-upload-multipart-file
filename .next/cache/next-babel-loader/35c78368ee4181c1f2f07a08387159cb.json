{"ast":null,"code":"var _jsxFileName = \"/Users/macos/Documents/learn/aws-upload/aws-s3-multipart-upload/frontend/pages/index.js\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport axios from 'axios';\nexport default class Index extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      fileSelected: null,\n      uploadId: '',\n      fileName: '',\n      backendUrl: 'http://localhost:3000'\n    };\n  }\n\n  async fileHandler(event) {\n    try {\n      let fileSelected = event.target.files[0];\n      let fileName = fileSelected.name;\n      this.setState({\n        fileSelected\n      });\n      this.setState({\n        fileName\n      });\n    } catch (err) {\n      console.error(err, err.message);\n    }\n  }\n\n  async startUpload(event) {\n    try {\n      event.preventDefault();\n      const params = {\n        fileName: this.state.fileName,\n        fileType: this.state.fileSelected.type\n      };\n      let resp = await axios.get(`${this.state.backendUrl}/start-upload`, {\n        params\n      });\n      let {\n        uploadId\n      } = resp.data;\n      this.setState({\n        uploadId\n      });\n      this.uploadMultipartFile();\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  async uploadMultipartFile() {\n    try {\n      console.log('Inside uploadMultipartFile');\n      const CHUNK_SIZE = 10000000; // 10MB\n\n      const fileSize = this.state.fileSelected.size;\n      const CHUNKS_COUNT = Math.floor(fileSize / CHUNK_SIZE) + 1;\n      let promisesArray = [];\n      let start, end, blob;\n\n      for (let index = 1; index < CHUNKS_COUNT + 1; index++) {\n        start = (index - 1) * CHUNK_SIZE;\n        end = index * CHUNK_SIZE;\n        blob = index < CHUNKS_COUNT ? this.state.fileSelected.slice(start, end) : this.state.fileSelected.slice(start); // Get presigned URL for each part\n\n        let getUploadUrlResp = await axios.get(`${this.state.backendUrl}/get-upload-url`, {\n          params: {\n            fileName: this.state.fileName,\n            partNumber: index,\n            uploadId: this.state.uploadId\n          }\n        });\n        let {\n          presignedUrl\n        } = getUploadUrlResp.data;\n        console.log('   Presigned URL ' + index + ': ' + presignedUrl + ' filetype ' + this.state.fileSelected.type); // Send part aws server\n\n        let uploadResp = axios.put(presignedUrl, blob, {\n          headers: {\n            'Content-Type': this.state.fileSelected.type\n          }\n        });\n        promisesArray.push(uploadResp);\n      }\n\n      let resolvedArray = await Promise.all(promisesArray);\n      console.log(resolvedArray, ' resolvedAr');\n      let uploadPartsArray = [];\n      resolvedArray.forEach((resolvedPromise, index) => {\n        uploadPartsArray.push({\n          ETag: resolvedPromise.headers.etag,\n          PartNumber: index + 1\n        });\n      }); // CompleteMultipartUpload in the backend server\n\n      let completeUploadResp = await axios.post(`${this.state.backendUrl}/complete-upload`, {\n        params: {\n          fileName: this.state.fileName,\n          parts: uploadPartsArray,\n          uploadId: this.state.uploadId\n        }\n      });\n      console.log(completeUploadResp.data, \"complete upload response\");\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 7\n      }\n    }, __jsx(\"form\", {\n      onSubmit: this.startUpload.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }\n    }, __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }\n    }, __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 13\n      }\n    }, \"Upload Dataset:\"), __jsx(\"input\", {\n      type: \"file\",\n      id: \"file\",\n      onChange: this.fileHandler.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 13\n      }\n    }), __jsx(\"button\", {\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 13\n      }\n    }, \"Upload\"))));\n  }\n\n}","map":{"version":3,"names":["React","Component","axios","Index","constructor","props","state","fileSelected","uploadId","fileName","backendUrl","fileHandler","event","target","files","name","setState","err","console","error","message","startUpload","preventDefault","params","fileType","type","resp","get","data","uploadMultipartFile","log","CHUNK_SIZE","fileSize","size","CHUNKS_COUNT","Math","floor","promisesArray","start","end","blob","index","slice","getUploadUrlResp","partNumber","presignedUrl","uploadResp","put","headers","push","resolvedArray","Promise","all","uploadPartsArray","forEach","resolvedPromise","ETag","etag","PartNumber","completeUploadResp","post","parts","render","bind"],"sources":["/Users/macos/Documents/learn/aws-upload/aws-s3-multipart-upload/frontend/pages/index.js"],"sourcesContent":["import React, { Component } from 'react'\nimport axios from 'axios'\n\nexport default class Index extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      fileSelected: null,\n      uploadId: '',\n      fileName: '',\n      backendUrl: 'http://localhost:3000'\n    }\n  }\n\n  async fileHandler(event) {\n    try {\n      let fileSelected = event.target.files[0]\n      let fileName = fileSelected.name\n      this.setState({ fileSelected })\n      this.setState({ fileName })\n    } catch (err) {\n      console.error(err, err.message) \n    }\n  }\n\n  async startUpload(event) {\n    try {\n      event.preventDefault()\n      const params = {\n        fileName: this.state.fileName,\n        fileType: this.state.fileSelected.type\n      };\n\n      let resp = await axios.get(`${this.state.backendUrl}/start-upload`, { params })\n      let { uploadId } = resp.data\n      this.setState({ uploadId })\n      this.uploadMultipartFile()\n\n    } catch (err) {\n      console.log(err)\n    }\n  }\n\n  async uploadMultipartFile() {\n    try {\n      console.log('Inside uploadMultipartFile')\n      const CHUNK_SIZE = 10000000 // 10MB\n      const fileSize = this.state.fileSelected.size\n      const CHUNKS_COUNT = Math.floor(fileSize / CHUNK_SIZE) + 1\n      let promisesArray = []\n      let start, end, blob\n\n      for (let index = 1; index < CHUNKS_COUNT + 1; index++) {\n        start = (index - 1) * CHUNK_SIZE\n        end = (index) * CHUNK_SIZE\n        blob = (index < CHUNKS_COUNT) ? this.state.fileSelected.slice(start, end) : this.state.fileSelected.slice(start)\n\n        // Get presigned URL for each part\n        let getUploadUrlResp = await axios.get(`${this.state.backendUrl}/get-upload-url`, {\n          params: {\n            fileName: this.state.fileName,\n            partNumber: index,\n            uploadId: this.state.uploadId\n          }\n        })\n\n        let { presignedUrl } = getUploadUrlResp.data\n        console.log('   Presigned URL ' + index + ': ' + presignedUrl + ' filetype ' + this.state.fileSelected.type)\n\n        // Send part aws server\n        let uploadResp = axios.put(presignedUrl, blob, {\n          headers: {\n            'Content-Type': this.state.fileSelected.type\n          }\n        });\n        promisesArray.push(uploadResp)\n      }\n\n      let resolvedArray = await Promise.all(promisesArray)\n      console.log(resolvedArray, ' resolvedAr')\n\n      let uploadPartsArray = []\n      resolvedArray.forEach((resolvedPromise, index) => {\n        uploadPartsArray.push({\n          ETag: resolvedPromise.headers.etag,\n          PartNumber: index + 1\n        })\n      })\n\n      // CompleteMultipartUpload in the backend server\n      let completeUploadResp = await axios.post(`${this.state.backendUrl}/complete-upload`, {\n        params: {\n          fileName: this.state.fileName,\n          parts: uploadPartsArray,\n          uploadId: this.state.uploadId\n        }\n      })\n\n      console.log(completeUploadResp.data, \"complete upload response\")\n\n    } catch (err) {\n      console.log(err)\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <form onSubmit={this.startUpload.bind(this)}>\n          <div>\n            <p>Upload Dataset:</p>\n            <input type='file' id='file' onChange={this.fileHandler.bind(this)} />\n            <button type='submit'>\n              Upload\n            </button>\n          </div>\n        </form>\n      </div>\n    )\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}