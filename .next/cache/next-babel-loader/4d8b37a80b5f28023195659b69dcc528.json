{"ast":null,"code":"var _jsxFileName = \"/Users/macos/Documents/learn/aws-upload/aws-s3-multipart-upload/frontend/pages/index.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\nexport default class Index extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      fileSelected: null,\n      uploadId: \"\",\n      fileName: \"\",\n      backendUrl: \"http://localhost:3001\"\n    };\n  }\n\n  async fileHandler(event) {\n    try {\n      let fileSelected = event.target.files[0];\n      let fileName = fileSelected.name;\n      this.setState({\n        fileSelected\n      });\n      this.setState({\n        fileName\n      });\n    } catch (err) {\n      console.error(err, err.message);\n    }\n  }\n\n  async startUpload(event) {\n    try {\n      event.preventDefault(); // let resp = await axios.delete(\n      //   `${this.state.backendUrl}/api/v1/file/62c3b627d34caccddce9dbad`\n      // );\n      // console.log(resp)\n\n      const body = {\n        fileName: this.state.fileName,\n        // fileType: this.state.fileSelected.type,\n        path: \"courses\"\n      };\n      let resp = await axios.post(`${this.state.backendUrl}/api/v1/file/presigned-url`, _objectSpread({}, body));\n      let {\n        presignedUrl,\n        storageKey,\n        fileName\n      } = resp.data.data;\n      const result = await axios.put(presignedUrl, this.state.fileSelected, {\n        headers: {\n          \"x-amz-acl\": \"public-read\",\n          \"Content-Type\": this.state.fileSelected.type\n        }\n      });\n\n      if (result.status === 200) {\n        // console.log(this.state.fileSelected);\n        const lastDot = this.state.fileSelected.name.lastIndexOf(\".\");\n        console.log(JSON.stringify({\n          originalFileName: this.state.fileSelected.name,\n          fileName,\n          size: this.state.fileSelected.size,\n          extension: this.state.fileSelected.name.substr(lastDot + 1),\n          mimetype: this.state.fileSelected.type,\n          storageKey\n        }));\n        const response = await axios.post(`${this.state.backendUrl}/api/v1/file`, {\n          originalFileName: this.state.fileSelected.name,\n          fileName,\n          size: this.state.fileSelected.size,\n          extension: this.state.fileSelected.name.substr(lastDot + 1),\n          mimetype: this.state.fileSelected.type,\n          storageKey\n        });\n        console.log(\"response\", response);\n      } // let uploadResp = await axios.put(presignedUrl, blob, {\n      //   headers: {\n      //     \"Content-Type\": this.state.fileSelected.type,\n      //   },\n      // });\n      // this.setState({ uploadId });\n      // this.uploadMultipartFile();\n      // event.preventDefault();\n      // const params = {\n      //   fileName: this.state.fileName,\n      //   fileType: this.state.fileSelected.type,\n      // };\n      // let resp = await axios.get(`${this.state.backendUrl}/start-upload`, {\n      //   params,\n      // });\n      // console.log(\"resp\", resp);\n      // let { uploadId } = resp.data;\n      // this.setState({ uploadId });\n      // this.uploadMultipartFile();\n\n      /**\n       event.preventDefault();\n      const params = {\n        fileName: this.state.fileName,\n        fileType: this.state.fileSelected.type,\n      };\n       // let resp = await axios.get(`${this.state.backendUrl}/start-upload`, {\n      //   params,\n      // });\n      let resp = await axios.get(\n        `${this.state.backendUrl}/start-upload-signal`,\n        {\n          params,\n        }\n      );\n      let { url } = resp.data;\n      console.log(url);\n      const result = await axios.put(url, this.state.fileSelected, {\n        headers: {\n          \"x-amz-acl\": \"public-read\",\n          \"Content-Type\": this.state.fileSelected.type,\n          \"Access-Control-Allow-Origin\": \"*\"\n        },\n      });\n      console.log(result)\n      // this.setState({ uploadId });\n      // this.uploadMultipartFile();\n       */\n\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  async uploadMultipartFile() {\n    try {\n      console.log(\"Inside uploadMultipartFile\");\n      const CHUNK_SIZE = 1024 * 1000 * 300; // 300MB\n\n      const fileSize = this.state.fileSelected.size;\n      const CHUNKS_COUNT = Math.floor(fileSize / CHUNK_SIZE) + 1;\n      let promisesArray = [];\n      let start, end, blob;\n      let uploadPartsArray = [];\n\n      for (let index = 1; index < CHUNKS_COUNT + 1; index++) {\n        start = (index - 1) * CHUNK_SIZE;\n        end = index * CHUNK_SIZE;\n        blob = index < CHUNKS_COUNT ? this.state.fileSelected.slice(start, end) : this.state.fileSelected.slice(start); // Get presigned URL for each part\n\n        let getUploadUrlResp = await axios.get(`${this.state.backendUrl}/get-upload-url`, {\n          params: {\n            fileName: this.state.fileName,\n            partNumber: index,\n            uploadId: this.state.uploadId\n          }\n        });\n        let {\n          presignedUrl\n        } = getUploadUrlResp.data; // console.log(\n        //   \"   Presigned URL \" +\n        //     index +\n        //     \": \" +\n        //     presignedUrl +\n        //     \" filetype \" +\n        //     this.state.fileSelected.type\n        // );\n        // Send part aws server\n\n        let uploadResp = await axios.put(presignedUrl, blob, {\n          headers: {\n            \"Content-Type\": this.state.fileSelected.type,\n            \"x-amz-acl\": \"public-read\"\n          }\n        });\n\n        if (uploadResp) {\n          console.log(uploadResp); // uploadPartsArray.push(uploadResp)\n        } // promisesArray.push(uploadResp);\n\n      }\n\n      let resolvedArray = await Promise.all(promisesArray); // console.log(resolvedArray, \" resolvedAr\");\n      // let uploadPartsArray = [];\n      // resolvedArray.forEach((resolvedPromise, index) => {\n      //   console.log(\"resolvedPromise\", resolvedPromise);\n      //   uploadPartsArray.push({\n      //     ETag: resolvedPromise.headers.etag,\n      //     PartNumber: index + 1,\n      //   });\n      // });\n      // CompleteMultipartUpload in the backend server\n\n      let completeUploadResp = await axios.post(`${this.state.backendUrl}/complete-upload`, {\n        params: {\n          fileName: this.state.fileName,\n          parts: uploadPartsArray,\n          uploadId: this.state.uploadId\n        }\n      });\n      console.log(completeUploadResp.data, \"complete upload response\");\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  async getData() {\n    const resp = await axios.get(`${this.state.backendUrl}/api/v1/file/62c3b627d34caccddce9dbad`);\n    console.log(resp);\n  }\n\n  componentDidMount() {// this.getData();\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      style: {\n        backgroundColor: \"grey\",\n        height: 1500\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 7\n      }\n    }, __jsx(\"form\", {\n      onSubmit: this.startUpload.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 9\n      }\n    }, __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 11\n      }\n    }, __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 13\n      }\n    }, \"Upload Dataset:\"), __jsx(\"input\", {\n      type: \"file\",\n      id: \"file\",\n      onChange: this.fileHandler.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 13\n      }\n    }), __jsx(\"button\", {\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 13\n      }\n    }, \"Upload\"))));\n  }\n\n}","map":{"version":3,"names":["React","Component","axios","Index","constructor","props","state","fileSelected","uploadId","fileName","backendUrl","fileHandler","event","target","files","name","setState","err","console","error","message","startUpload","preventDefault","body","path","resp","post","presignedUrl","storageKey","data","result","put","headers","type","status","lastDot","lastIndexOf","log","JSON","stringify","originalFileName","size","extension","substr","mimetype","response","uploadMultipartFile","CHUNK_SIZE","fileSize","CHUNKS_COUNT","Math","floor","promisesArray","start","end","blob","uploadPartsArray","index","slice","getUploadUrlResp","get","params","partNumber","uploadResp","resolvedArray","Promise","all","completeUploadResp","parts","getData","componentDidMount","render","backgroundColor","height","bind"],"sources":["/Users/macos/Documents/learn/aws-upload/aws-s3-multipart-upload/frontend/pages/index.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport axios from \"axios\";\n\nexport default class Index extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      fileSelected: null,\n      uploadId: \"\",\n      fileName: \"\",\n      backendUrl: \"http://localhost:3001\",\n    };\n  }\n\n  async fileHandler(event) {\n    try {\n      let fileSelected = event.target.files[0];\n      let fileName = fileSelected.name;\n      this.setState({ fileSelected });\n      this.setState({ fileName });\n    } catch (err) {\n      console.error(err, err.message);\n    }\n  }\n\n  async startUpload(event) {\n    try {\n      event.preventDefault();\n\n      // let resp = await axios.delete(\n      //   `${this.state.backendUrl}/api/v1/file/62c3b627d34caccddce9dbad`\n      // );\n      // console.log(resp)\n      const body = {\n        fileName: this.state.fileName,\n        // fileType: this.state.fileSelected.type,\n        path: \"courses\",\n      };\n\n      let resp = await axios.post(\n        `${this.state.backendUrl}/api/v1/file/presigned-url`,\n        {\n          ...body,\n        }\n      );\n      let { presignedUrl, storageKey, fileName } = resp.data.data;\n      const result = await axios.put(presignedUrl, this.state.fileSelected, {\n        headers: {\n          \"x-amz-acl\": \"public-read\",\n          \"Content-Type\": this.state.fileSelected.type,\n        },\n      });\n      if (result.status === 200) {\n        // console.log(this.state.fileSelected);\n        const lastDot = this.state.fileSelected.name.lastIndexOf(\".\");\n        console.log(\n          JSON.stringify({\n            originalFileName: this.state.fileSelected.name,\n            fileName,\n            size: this.state.fileSelected.size,\n            extension: this.state.fileSelected.name.substr(lastDot + 1),\n            mimetype: this.state.fileSelected.type,\n            storageKey,\n          })\n        );\n        const response = await axios.post(\n          `${this.state.backendUrl}/api/v1/file`,\n          {\n            originalFileName: this.state.fileSelected.name,\n            fileName,\n            size: this.state.fileSelected.size,\n            extension: this.state.fileSelected.name.substr(lastDot + 1),\n            mimetype: this.state.fileSelected.type,\n            storageKey,\n          }\n        );\n        console.log(\"response\", response);\n      }\n\n      // let uploadResp = await axios.put(presignedUrl, blob, {\n      //   headers: {\n      //     \"Content-Type\": this.state.fileSelected.type,\n      //   },\n      // });\n      // this.setState({ uploadId });\n      // this.uploadMultipartFile();\n      // event.preventDefault();\n      // const params = {\n      //   fileName: this.state.fileName,\n      //   fileType: this.state.fileSelected.type,\n      // };\n\n      // let resp = await axios.get(`${this.state.backendUrl}/start-upload`, {\n      //   params,\n      // });\n      // console.log(\"resp\", resp);\n      // let { uploadId } = resp.data;\n      // this.setState({ uploadId });\n      // this.uploadMultipartFile();\n      /**\n       event.preventDefault();\n      const params = {\n        fileName: this.state.fileName,\n        fileType: this.state.fileSelected.type,\n      };\n\n      // let resp = await axios.get(`${this.state.backendUrl}/start-upload`, {\n      //   params,\n      // });\n      let resp = await axios.get(\n        `${this.state.backendUrl}/start-upload-signal`,\n        {\n          params,\n        }\n      );\n      let { url } = resp.data;\n      console.log(url);\n      const result = await axios.put(url, this.state.fileSelected, {\n        headers: {\n          \"x-amz-acl\": \"public-read\",\n          \"Content-Type\": this.state.fileSelected.type,\n          \"Access-Control-Allow-Origin\": \"*\"\n        },\n      });\n      console.log(result)\n      // this.setState({ uploadId });\n      // this.uploadMultipartFile();\n       */\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  async uploadMultipartFile() {\n    try {\n      console.log(\"Inside uploadMultipartFile\");\n      const CHUNK_SIZE = 1024 * 1000 * 300; // 300MB\n      const fileSize = this.state.fileSelected.size;\n      const CHUNKS_COUNT = Math.floor(fileSize / CHUNK_SIZE) + 1;\n      let promisesArray = [];\n      let start, end, blob;\n      let uploadPartsArray = [];\n\n      for (let index = 1; index < CHUNKS_COUNT + 1; index++) {\n        start = (index - 1) * CHUNK_SIZE;\n        end = index * CHUNK_SIZE;\n        blob =\n          index < CHUNKS_COUNT\n            ? this.state.fileSelected.slice(start, end)\n            : this.state.fileSelected.slice(start);\n\n        // Get presigned URL for each part\n        let getUploadUrlResp = await axios.get(\n          `${this.state.backendUrl}/get-upload-url`,\n          {\n            params: {\n              fileName: this.state.fileName,\n              partNumber: index,\n              uploadId: this.state.uploadId,\n            },\n          }\n        );\n\n        let { presignedUrl } = getUploadUrlResp.data;\n        // console.log(\n        //   \"   Presigned URL \" +\n        //     index +\n        //     \": \" +\n        //     presignedUrl +\n        //     \" filetype \" +\n        //     this.state.fileSelected.type\n        // );\n\n        // Send part aws server\n        let uploadResp = await axios.put(presignedUrl, blob, {\n          headers: {\n            \"Content-Type\": this.state.fileSelected.type,\n            \"x-amz-acl\": \"public-read\",\n          },\n        });\n        if (uploadResp) {\n          console.log(uploadResp)\n          // uploadPartsArray.push(uploadResp)\n        }\n        // promisesArray.push(uploadResp);\n      }\n\n      let resolvedArray = await Promise.all(promisesArray);\n      // console.log(resolvedArray, \" resolvedAr\");\n\n      // let uploadPartsArray = [];\n      // resolvedArray.forEach((resolvedPromise, index) => {\n      //   console.log(\"resolvedPromise\", resolvedPromise);\n      //   uploadPartsArray.push({\n      //     ETag: resolvedPromise.headers.etag,\n      //     PartNumber: index + 1,\n      //   });\n      // });\n\n      // CompleteMultipartUpload in the backend server\n      let completeUploadResp = await axios.post(\n        `${this.state.backendUrl}/complete-upload`,\n        {\n          params: {\n            fileName: this.state.fileName,\n            parts: uploadPartsArray,\n            uploadId: this.state.uploadId,\n          },\n        }\n      );\n\n      console.log(completeUploadResp.data, \"complete upload response\");\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  async getData() {\n    const resp = await axios.get(\n      `${this.state.backendUrl}/api/v1/file/62c3b627d34caccddce9dbad`\n    );\n    console.log(resp);\n  }\n\n  componentDidMount() {\n    // this.getData();\n  }\n  render() {\n    return (\n      <div style={{ backgroundColor: \"grey\", height: 1500 }}>\n        <form onSubmit={this.startUpload.bind(this)}>\n          <div>\n            <p>Upload Dataset:</p>\n            <input\n              type=\"file\"\n              id=\"file\"\n              onChange={this.fileHandler.bind(this)}\n            />\n            <button type=\"submit\">Upload</button>\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,eAAe,MAAMC,KAAN,SAAoBF,SAApB,CAA8B;EAC3CG,WAAW,CAACC,KAAD,EAAQ;IACjB,MAAMA,KAAN;IACA,KAAKC,KAAL,GAAa;MACXC,YAAY,EAAE,IADH;MAEXC,QAAQ,EAAE,EAFC;MAGXC,QAAQ,EAAE,EAHC;MAIXC,UAAU,EAAE;IAJD,CAAb;EAMD;;EAEgB,MAAXC,WAAW,CAACC,KAAD,EAAQ;IACvB,IAAI;MACF,IAAIL,YAAY,GAAGK,KAAK,CAACC,MAAN,CAAaC,KAAb,CAAmB,CAAnB,CAAnB;MACA,IAAIL,QAAQ,GAAGF,YAAY,CAACQ,IAA5B;MACA,KAAKC,QAAL,CAAc;QAAET;MAAF,CAAd;MACA,KAAKS,QAAL,CAAc;QAAEP;MAAF,CAAd;IACD,CALD,CAKE,OAAOQ,GAAP,EAAY;MACZC,OAAO,CAACC,KAAR,CAAcF,GAAd,EAAmBA,GAAG,CAACG,OAAvB;IACD;EACF;;EAEgB,MAAXC,WAAW,CAACT,KAAD,EAAQ;IACvB,IAAI;MACFA,KAAK,CAACU,cAAN,GADE,CAGF;MACA;MACA;MACA;;MACA,MAAMC,IAAI,GAAG;QACXd,QAAQ,EAAE,KAAKH,KAAL,CAAWG,QADV;QAEX;QACAe,IAAI,EAAE;MAHK,CAAb;MAMA,IAAIC,IAAI,GAAG,MAAMvB,KAAK,CAACwB,IAAN,CACd,GAAE,KAAKpB,KAAL,CAAWI,UAAW,4BADV,oBAGVa,IAHU,EAAjB;MAMA,IAAI;QAAEI,YAAF;QAAgBC,UAAhB;QAA4BnB;MAA5B,IAAyCgB,IAAI,CAACI,IAAL,CAAUA,IAAvD;MACA,MAAMC,MAAM,GAAG,MAAM5B,KAAK,CAAC6B,GAAN,CAAUJ,YAAV,EAAwB,KAAKrB,KAAL,CAAWC,YAAnC,EAAiD;QACpEyB,OAAO,EAAE;UACP,aAAa,aADN;UAEP,gBAAgB,KAAK1B,KAAL,CAAWC,YAAX,CAAwB0B;QAFjC;MAD2D,CAAjD,CAArB;;MAMA,IAAIH,MAAM,CAACI,MAAP,KAAkB,GAAtB,EAA2B;QACzB;QACA,MAAMC,OAAO,GAAG,KAAK7B,KAAL,CAAWC,YAAX,CAAwBQ,IAAxB,CAA6BqB,WAA7B,CAAyC,GAAzC,CAAhB;QACAlB,OAAO,CAACmB,GAAR,CACEC,IAAI,CAACC,SAAL,CAAe;UACbC,gBAAgB,EAAE,KAAKlC,KAAL,CAAWC,YAAX,CAAwBQ,IAD7B;UAEbN,QAFa;UAGbgC,IAAI,EAAE,KAAKnC,KAAL,CAAWC,YAAX,CAAwBkC,IAHjB;UAIbC,SAAS,EAAE,KAAKpC,KAAL,CAAWC,YAAX,CAAwBQ,IAAxB,CAA6B4B,MAA7B,CAAoCR,OAAO,GAAG,CAA9C,CAJE;UAKbS,QAAQ,EAAE,KAAKtC,KAAL,CAAWC,YAAX,CAAwB0B,IALrB;UAMbL;QANa,CAAf,CADF;QAUA,MAAMiB,QAAQ,GAAG,MAAM3C,KAAK,CAACwB,IAAN,CACpB,GAAE,KAAKpB,KAAL,CAAWI,UAAW,cADJ,EAErB;UACE8B,gBAAgB,EAAE,KAAKlC,KAAL,CAAWC,YAAX,CAAwBQ,IAD5C;UAEEN,QAFF;UAGEgC,IAAI,EAAE,KAAKnC,KAAL,CAAWC,YAAX,CAAwBkC,IAHhC;UAIEC,SAAS,EAAE,KAAKpC,KAAL,CAAWC,YAAX,CAAwBQ,IAAxB,CAA6B4B,MAA7B,CAAoCR,OAAO,GAAG,CAA9C,CAJb;UAKES,QAAQ,EAAE,KAAKtC,KAAL,CAAWC,YAAX,CAAwB0B,IALpC;UAMEL;QANF,CAFqB,CAAvB;QAWAV,OAAO,CAACmB,GAAR,CAAY,UAAZ,EAAwBQ,QAAxB;MACD,CAnDC,CAqDF;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MAEA;MACA;MACA;MACA;MACA;MACA;MACA;;MACA;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEK,CAtGD,CAsGE,OAAO5B,GAAP,EAAY;MACZC,OAAO,CAACmB,GAAR,CAAYpB,GAAZ;IACD;EACF;;EAEwB,MAAnB6B,mBAAmB,GAAG;IAC1B,IAAI;MACF5B,OAAO,CAACmB,GAAR,CAAY,4BAAZ;MACA,MAAMU,UAAU,GAAG,OAAO,IAAP,GAAc,GAAjC,CAFE,CAEoC;;MACtC,MAAMC,QAAQ,GAAG,KAAK1C,KAAL,CAAWC,YAAX,CAAwBkC,IAAzC;MACA,MAAMQ,YAAY,GAAGC,IAAI,CAACC,KAAL,CAAWH,QAAQ,GAAGD,UAAtB,IAAoC,CAAzD;MACA,IAAIK,aAAa,GAAG,EAApB;MACA,IAAIC,KAAJ,EAAWC,GAAX,EAAgBC,IAAhB;MACA,IAAIC,gBAAgB,GAAG,EAAvB;;MAEA,KAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGR,YAAY,GAAG,CAA3C,EAA8CQ,KAAK,EAAnD,EAAuD;QACrDJ,KAAK,GAAG,CAACI,KAAK,GAAG,CAAT,IAAcV,UAAtB;QACAO,GAAG,GAAGG,KAAK,GAAGV,UAAd;QACAQ,IAAI,GACFE,KAAK,GAAGR,YAAR,GACI,KAAK3C,KAAL,CAAWC,YAAX,CAAwBmD,KAAxB,CAA8BL,KAA9B,EAAqCC,GAArC,CADJ,GAEI,KAAKhD,KAAL,CAAWC,YAAX,CAAwBmD,KAAxB,CAA8BL,KAA9B,CAHN,CAHqD,CAQrD;;QACA,IAAIM,gBAAgB,GAAG,MAAMzD,KAAK,CAAC0D,GAAN,CAC1B,GAAE,KAAKtD,KAAL,CAAWI,UAAW,iBADE,EAE3B;UACEmD,MAAM,EAAE;YACNpD,QAAQ,EAAE,KAAKH,KAAL,CAAWG,QADf;YAENqD,UAAU,EAAEL,KAFN;YAGNjD,QAAQ,EAAE,KAAKF,KAAL,CAAWE;UAHf;QADV,CAF2B,CAA7B;QAWA,IAAI;UAAEmB;QAAF,IAAmBgC,gBAAgB,CAAC9B,IAAxC,CApBqD,CAqBrD;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QAEA;;QACA,IAAIkC,UAAU,GAAG,MAAM7D,KAAK,CAAC6B,GAAN,CAAUJ,YAAV,EAAwB4B,IAAxB,EAA8B;UACnDvB,OAAO,EAAE;YACP,gBAAgB,KAAK1B,KAAL,CAAWC,YAAX,CAAwB0B,IADjC;YAEP,aAAa;UAFN;QAD0C,CAA9B,CAAvB;;QAMA,IAAI8B,UAAJ,EAAgB;UACd7C,OAAO,CAACmB,GAAR,CAAY0B,UAAZ,EADc,CAEd;QACD,CAxCoD,CAyCrD;;MACD;;MAED,IAAIC,aAAa,GAAG,MAAMC,OAAO,CAACC,GAAR,CAAYd,aAAZ,CAA1B,CArDE,CAsDF;MAEA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MAEA;;MACA,IAAIe,kBAAkB,GAAG,MAAMjE,KAAK,CAACwB,IAAN,CAC5B,GAAE,KAAKpB,KAAL,CAAWI,UAAW,kBADI,EAE7B;QACEmD,MAAM,EAAE;UACNpD,QAAQ,EAAE,KAAKH,KAAL,CAAWG,QADf;UAEN2D,KAAK,EAAEZ,gBAFD;UAGNhD,QAAQ,EAAE,KAAKF,KAAL,CAAWE;QAHf;MADV,CAF6B,CAA/B;MAWAU,OAAO,CAACmB,GAAR,CAAY8B,kBAAkB,CAACtC,IAA/B,EAAqC,0BAArC;IACD,CA9ED,CA8EE,OAAOZ,GAAP,EAAY;MACZC,OAAO,CAACmB,GAAR,CAAYpB,GAAZ;IACD;EACF;;EAEY,MAAPoD,OAAO,GAAG;IACd,MAAM5C,IAAI,GAAG,MAAMvB,KAAK,CAAC0D,GAAN,CAChB,GAAE,KAAKtD,KAAL,CAAWI,UAAW,uCADR,CAAnB;IAGAQ,OAAO,CAACmB,GAAR,CAAYZ,IAAZ;EACD;;EAED6C,iBAAiB,GAAG,CAClB;EACD;;EACDC,MAAM,GAAG;IACP,OACE;MAAK,KAAK,EAAE;QAAEC,eAAe,EAAE,MAAnB;QAA2BC,MAAM,EAAE;MAAnC,CAAZ;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACE;MAAM,QAAQ,EAAE,KAAKpD,WAAL,CAAiBqD,IAAjB,CAAsB,IAAtB,CAAhB;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACE;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACE;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,qBADF,EAEE;MACE,IAAI,EAAC,MADP;MAEE,EAAE,EAAC,MAFL;MAGE,QAAQ,EAAE,KAAK/D,WAAL,CAAiB+D,IAAjB,CAAsB,IAAtB,CAHZ;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EAFF,EAOE;MAAQ,IAAI,EAAC,QAAb;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,YAPF,CADF,CADF,CADF;EAeD;;AAhP0C"},"metadata":{},"sourceType":"module"}