{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nvar _jsxFileName = \"/Users/macos/Documents/learn/aws-upload/aws-s3-multipart-upload/frontend/pages/index.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator[\"return\"] && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, \"catch\": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\n\nvar Index = /*#__PURE__*/function (_Component) {\n  _inherits(Index, _Component);\n\n  var _super = _createSuper(Index);\n\n  function Index(props) {\n    var _this;\n\n    _classCallCheck(this, Index);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      fileSelected: null,\n      uploadId: \"\",\n      fileName: \"\",\n      backendUrl: \"http://localhost:3000\"\n    };\n    return _this;\n  }\n\n  _createClass(Index, [{\n    key: \"fileHandler\",\n    value: function () {\n      var _fileHandler = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(event) {\n        var fileSelected, fileName;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                try {\n                  fileSelected = event.target.files[0];\n                  fileName = fileSelected.name;\n                  this.setState({\n                    fileSelected: fileSelected\n                  });\n                  this.setState({\n                    fileName: fileName\n                  });\n                } catch (err) {\n                  console.error(err, err.message);\n                }\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function fileHandler(_x) {\n        return _fileHandler.apply(this, arguments);\n      }\n\n      return fileHandler;\n    }()\n  }, {\n    key: \"startUpload\",\n    value: function () {\n      var _startUpload = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(event) {\n        var body, resp, _resp$data$data, presignedUrl, storageKey, fileName, result, lastDot, response;\n\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.prev = 0;\n                event.preventDefault(); // let resp = await axios.delete(\n                //   `${this.state.backendUrl}/api/v1/file/62c3b627d34caccddce9dbad`\n                // );\n                // console.log(resp)\n\n                body = {\n                  fileName: this.state.fileName,\n                  // fileType: this.state.fileSelected.type,\n                  path: \"courses\"\n                };\n                _context2.next = 5;\n                return axios.post(\"\".concat(this.state.backendUrl, \"/api/v1/file/presigned-url\"), _objectSpread({}, body));\n\n              case 5:\n                resp = _context2.sent;\n                _resp$data$data = resp.data.data, presignedUrl = _resp$data$data.presignedUrl, storageKey = _resp$data$data.storageKey, fileName = _resp$data$data.fileName;\n                _context2.next = 9;\n                return axios.put(presignedUrl, this.state.fileSelected, {\n                  headers: {\n                    \"x-amz-acl\": \"public-read\",\n                    \"Content-Type\": this.state.fileSelected.type\n                  }\n                });\n\n              case 9:\n                result = _context2.sent;\n\n                if (!(result.status === 200)) {\n                  _context2.next = 17;\n                  break;\n                }\n\n                // console.log(this.state.fileSelected);\n                lastDot = this.state.fileSelected.name.lastIndexOf(\".\");\n                console.log(JSON.stringify({\n                  originalFileName: this.state.fileSelected.name,\n                  fileName: fileName,\n                  size: this.state.fileSelected.size,\n                  extension: this.state.fileSelected.name.substr(lastDot + 1),\n                  mimetype: this.state.fileSelected.type,\n                  storageKey: storageKey\n                }));\n                _context2.next = 15;\n                return axios.post(\"\".concat(this.state.backendUrl, \"/api/v1/file\"), {\n                  originalFileName: this.state.fileSelected.name,\n                  fileName: fileName,\n                  size: this.state.fileSelected.size,\n                  extension: this.state.fileSelected.name.substr(lastDot + 1),\n                  mimetype: this.state.fileSelected.type,\n                  storageKey: storageKey\n                });\n\n              case 15:\n                response = _context2.sent;\n                console.log(\"response\", response);\n\n              case 17:\n                _context2.next = 22;\n                break;\n\n              case 19:\n                _context2.prev = 19;\n                _context2.t0 = _context2[\"catch\"](0);\n                console.log(_context2.t0);\n\n              case 22:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[0, 19]]);\n      }));\n\n      function startUpload(_x2) {\n        return _startUpload.apply(this, arguments);\n      }\n\n      return startUpload;\n    }()\n  }, {\n    key: \"uploadMultipartFile\",\n    value: function () {\n      var _uploadMultipartFile = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var CHUNK_SIZE, fileSize, CHUNKS_COUNT, promisesArray, start, end, blob, uploadPartsArray, index, getUploadUrlResp, presignedUrl, uploadResp, resolvedArray, completeUploadResp;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.prev = 0;\n                console.log(\"Inside uploadMultipartFile\");\n                CHUNK_SIZE = 1024 * 1000 * 300; // 300MB\n\n                fileSize = this.state.fileSelected.size;\n                CHUNKS_COUNT = Math.floor(fileSize / CHUNK_SIZE) + 1;\n                promisesArray = [];\n                uploadPartsArray = [];\n                index = 1;\n\n              case 8:\n                if (!(index < CHUNKS_COUNT + 1)) {\n                  _context3.next = 23;\n                  break;\n                }\n\n                start = (index - 1) * CHUNK_SIZE;\n                end = index * CHUNK_SIZE;\n                blob = index < CHUNKS_COUNT ? this.state.fileSelected.slice(start, end) : this.state.fileSelected.slice(start); // Get presigned URL for each part\n\n                _context3.next = 14;\n                return axios.get(\"\".concat(this.state.backendUrl, \"/get-upload-url\"), {\n                  params: {\n                    fileName: this.state.fileName,\n                    partNumber: index,\n                    uploadId: this.state.uploadId\n                  }\n                });\n\n              case 14:\n                getUploadUrlResp = _context3.sent;\n                presignedUrl = getUploadUrlResp.data.presignedUrl; // console.log(\n                //   \"   Presigned URL \" +\n                //     index +\n                //     \": \" +\n                //     presignedUrl +\n                //     \" filetype \" +\n                //     this.state.fileSelected.type\n                // );\n                // Send part aws server\n\n                _context3.next = 18;\n                return axios.put(presignedUrl, blob, {\n                  headers: {\n                    \"Content-Type\": this.state.fileSelected.type,\n                    \"x-amz-acl\": \"public-read\"\n                  }\n                });\n\n              case 18:\n                uploadResp = _context3.sent;\n\n                if (uploadResp) {\n                  console.log(uploadResp); // uploadPartsArray.push(uploadResp)\n                } // promisesArray.push(uploadResp);\n\n\n              case 20:\n                index++;\n                _context3.next = 8;\n                break;\n\n              case 23:\n                _context3.next = 25;\n                return Promise.all(promisesArray);\n\n              case 25:\n                resolvedArray = _context3.sent;\n                _context3.next = 28;\n                return axios.post(\"\".concat(this.state.backendUrl, \"/complete-upload\"), {\n                  params: {\n                    fileName: this.state.fileName,\n                    parts: uploadPartsArray,\n                    uploadId: this.state.uploadId\n                  }\n                });\n\n              case 28:\n                completeUploadResp = _context3.sent;\n                console.log(completeUploadResp.data, \"complete upload response\");\n                _context3.next = 35;\n                break;\n\n              case 32:\n                _context3.prev = 32;\n                _context3.t0 = _context3[\"catch\"](0);\n                console.log(_context3.t0);\n\n              case 35:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[0, 32]]);\n      }));\n\n      function uploadMultipartFile() {\n        return _uploadMultipartFile.apply(this, arguments);\n      }\n\n      return uploadMultipartFile;\n    }()\n  }, {\n    key: \"getData\",\n    value: function () {\n      var _getData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var resp;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return axios.get(\"\".concat(this.state.backendUrl, \"/api/v1/file/62c3b627d34caccddce9dbad\"));\n\n              case 2:\n                resp = _context4.sent;\n                console.log(resp);\n\n              case 4:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function getData() {\n        return _getData.apply(this, arguments);\n      }\n\n      return getData;\n    }()\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {// this.getData();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(\"div\", {\n        style: {\n          backgroundColor: \"grey\",\n          height: 1500\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 7\n        }\n      }, __jsx(\"form\", {\n        onSubmit: this.startUpload.bind(this),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 9\n        }\n      }, __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 11\n        }\n      }, __jsx(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 13\n        }\n      }, \"Upload Dataset:\"), __jsx(\"input\", {\n        type: \"file\",\n        id: \"file\",\n        onChange: this.fileHandler.bind(this),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 13\n        }\n      }), __jsx(\"button\", {\n        type: \"submit\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 13\n        }\n      }, \"Upload\"))));\n    }\n  }]);\n\n  return Index;\n}(Component);\n\nexport { Index as default };","map":{"version":3,"names":["React","Component","axios","Index","props","state","fileSelected","uploadId","fileName","backendUrl","event","target","files","name","setState","err","console","error","message","preventDefault","body","path","post","resp","data","presignedUrl","storageKey","put","headers","type","result","status","lastDot","lastIndexOf","log","JSON","stringify","originalFileName","size","extension","substr","mimetype","response","CHUNK_SIZE","fileSize","CHUNKS_COUNT","Math","floor","promisesArray","uploadPartsArray","index","start","end","blob","slice","get","params","partNumber","getUploadUrlResp","uploadResp","Promise","all","resolvedArray","parts","completeUploadResp","backgroundColor","height","startUpload","bind","fileHandler"],"sources":["/Users/macos/Documents/learn/aws-upload/aws-s3-multipart-upload/frontend/pages/index.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport axios from \"axios\";\n\nexport default class Index extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      fileSelected: null,\n      uploadId: \"\",\n      fileName: \"\",\n      backendUrl: \"http://localhost:3000\",\n    };\n  }\n\n  async fileHandler(event) {\n    try {\n      let fileSelected = event.target.files[0];\n      let fileName = fileSelected.name;\n      this.setState({ fileSelected });\n      this.setState({ fileName });\n    } catch (err) {\n      console.error(err, err.message);\n    }\n  }\n\n  async startUpload(event) {\n    try {\n      event.preventDefault();\n\n      // let resp = await axios.delete(\n      //   `${this.state.backendUrl}/api/v1/file/62c3b627d34caccddce9dbad`\n      // );\n      // console.log(resp)\n      const body = {\n        fileName: this.state.fileName,\n        // fileType: this.state.fileSelected.type,\n        path: \"courses\",\n      };\n\n      let resp = await axios.post(\n        `${this.state.backendUrl}/api/v1/file/presigned-url`,\n        {\n          ...body,\n        }\n      );\n      let { presignedUrl, storageKey, fileName } = resp.data.data;\n      const result = await axios.put(presignedUrl, this.state.fileSelected, {\n        headers: {\n          \"x-amz-acl\": \"public-read\",\n          \"Content-Type\": this.state.fileSelected.type,\n        },\n      });\n      if (result.status === 200) {\n        // console.log(this.state.fileSelected);\n        const lastDot = this.state.fileSelected.name.lastIndexOf(\".\");\n        console.log(\n          JSON.stringify({\n            originalFileName: this.state.fileSelected.name,\n            fileName,\n            size: this.state.fileSelected.size,\n            extension: this.state.fileSelected.name.substr(lastDot + 1),\n            mimetype: this.state.fileSelected.type,\n            storageKey,\n          })\n        );\n        const response = await axios.post(\n          `${this.state.backendUrl}/api/v1/file`,\n          {\n            originalFileName: this.state.fileSelected.name,\n            fileName,\n            size: this.state.fileSelected.size,\n            extension: this.state.fileSelected.name.substr(lastDot + 1),\n            mimetype: this.state.fileSelected.type,\n            storageKey,\n          }\n        );\n        console.log(\"response\", response);\n      }\n\n      // let uploadResp = await axios.put(presignedUrl, blob, {\n      //   headers: {\n      //     \"Content-Type\": this.state.fileSelected.type,\n      //   },\n      // });\n      // this.setState({ uploadId });\n      // this.uploadMultipartFile();\n      // event.preventDefault();\n      // const params = {\n      //   fileName: this.state.fileName,\n      //   fileType: this.state.fileSelected.type,\n      // };\n\n      // let resp = await axios.get(`${this.state.backendUrl}/start-upload`, {\n      //   params,\n      // });\n      // console.log(\"resp\", resp);\n      // let { uploadId } = resp.data;\n      // this.setState({ uploadId });\n      // this.uploadMultipartFile();\n      /**\n       event.preventDefault();\n      const params = {\n        fileName: this.state.fileName,\n        fileType: this.state.fileSelected.type,\n      };\n\n      // let resp = await axios.get(`${this.state.backendUrl}/start-upload`, {\n      //   params,\n      // });\n      let resp = await axios.get(\n        `${this.state.backendUrl}/start-upload-signal`,\n        {\n          params,\n        }\n      );\n      let { url } = resp.data;\n      console.log(url);\n      const result = await axios.put(url, this.state.fileSelected, {\n        headers: {\n          \"x-amz-acl\": \"public-read\",\n          \"Content-Type\": this.state.fileSelected.type,\n          \"Access-Control-Allow-Origin\": \"*\"\n        },\n      });\n      console.log(result)\n      // this.setState({ uploadId });\n      // this.uploadMultipartFile();\n       */\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  async uploadMultipartFile() {\n    try {\n      console.log(\"Inside uploadMultipartFile\");\n      const CHUNK_SIZE = 1024 * 1000 * 300; // 300MB\n      const fileSize = this.state.fileSelected.size;\n      const CHUNKS_COUNT = Math.floor(fileSize / CHUNK_SIZE) + 1;\n      let promisesArray = [];\n      let start, end, blob;\n      let uploadPartsArray = [];\n\n      for (let index = 1; index < CHUNKS_COUNT + 1; index++) {\n        start = (index - 1) * CHUNK_SIZE;\n        end = index * CHUNK_SIZE;\n        blob =\n          index < CHUNKS_COUNT\n            ? this.state.fileSelected.slice(start, end)\n            : this.state.fileSelected.slice(start);\n\n        // Get presigned URL for each part\n        let getUploadUrlResp = await axios.get(\n          `${this.state.backendUrl}/get-upload-url`,\n          {\n            params: {\n              fileName: this.state.fileName,\n              partNumber: index,\n              uploadId: this.state.uploadId,\n            },\n          }\n        );\n\n        let { presignedUrl } = getUploadUrlResp.data;\n        // console.log(\n        //   \"   Presigned URL \" +\n        //     index +\n        //     \": \" +\n        //     presignedUrl +\n        //     \" filetype \" +\n        //     this.state.fileSelected.type\n        // );\n\n        // Send part aws server\n        let uploadResp = await axios.put(presignedUrl, blob, {\n          headers: {\n            \"Content-Type\": this.state.fileSelected.type,\n            \"x-amz-acl\": \"public-read\",\n          },\n        });\n        if (uploadResp) {\n          console.log(uploadResp)\n          // uploadPartsArray.push(uploadResp)\n        }\n        // promisesArray.push(uploadResp);\n      }\n\n      let resolvedArray = await Promise.all(promisesArray);\n      // console.log(resolvedArray, \" resolvedAr\");\n\n      // let uploadPartsArray = [];\n      // resolvedArray.forEach((resolvedPromise, index) => {\n      //   console.log(\"resolvedPromise\", resolvedPromise);\n      //   uploadPartsArray.push({\n      //     ETag: resolvedPromise.headers.etag,\n      //     PartNumber: index + 1,\n      //   });\n      // });\n\n      // CompleteMultipartUpload in the backend server\n      let completeUploadResp = await axios.post(\n        `${this.state.backendUrl}/complete-upload`,\n        {\n          params: {\n            fileName: this.state.fileName,\n            parts: uploadPartsArray,\n            uploadId: this.state.uploadId,\n          },\n        }\n      );\n\n      console.log(completeUploadResp.data, \"complete upload response\");\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  async getData() {\n    const resp = await axios.get(\n      `${this.state.backendUrl}/api/v1/file/62c3b627d34caccddce9dbad`\n    );\n    console.log(resp);\n  }\n\n  componentDidMount() {\n    // this.getData();\n  }\n  render() {\n    return (\n      <div style={{ backgroundColor: \"grey\", height: 1500 }}>\n        <form onSubmit={this.startUpload.bind(this)}>\n          <div>\n            <p>Upload Dataset:</p>\n            <input\n              type=\"file\"\n              id=\"file\"\n              onChange={this.fileHandler.bind(this)}\n            />\n            <button type=\"submit\">Upload</button>\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;+CACA,oJ;;;;;;AADA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;;IAEqBC,K;;;;;EACnB,eAAYC,KAAZ,EAAmB;IAAA;;IAAA;;IACjB,0BAAMA,KAAN;IACA,MAAKC,KAAL,GAAa;MACXC,YAAY,EAAE,IADH;MAEXC,QAAQ,EAAE,EAFC;MAGXC,QAAQ,EAAE,EAHC;MAIXC,UAAU,EAAE;IAJD,CAAb;IAFiB;EAQlB;;;;;oFAED,iBAAkBC,KAAlB;QAAA;QAAA;UAAA;YAAA;cAAA;gBACE,IAAI;kBACEJ,YADF,GACiBI,KAAK,CAACC,MAAN,CAAaC,KAAb,CAAmB,CAAnB,CADjB;kBAEEJ,QAFF,GAEaF,YAAY,CAACO,IAF1B;kBAGF,KAAKC,QAAL,CAAc;oBAAER,YAAY,EAAZA;kBAAF,CAAd;kBACA,KAAKQ,QAAL,CAAc;oBAAEN,QAAQ,EAARA;kBAAF,CAAd;gBACD,CALD,CAKE,OAAOO,GAAP,EAAY;kBACZC,OAAO,CAACC,KAAR,CAAcF,GAAd,EAAmBA,GAAG,CAACG,OAAvB;gBACD;;cARH;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,C;;;;;;;;;;;oFAWA,kBAAkBR,KAAlB;QAAA;;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAEIA,KAAK,CAACS,cAAN,GAFJ,CAII;gBACA;gBACA;gBACA;;gBACMC,IARV,GAQiB;kBACXZ,QAAQ,EAAE,KAAKH,KAAL,CAAWG,QADV;kBAEX;kBACAa,IAAI,EAAE;gBAHK,CARjB;gBAAA;gBAAA,OAcqBnB,KAAK,CAACoB,IAAN,WACZ,KAAKjB,KAAL,CAAWI,UADC,mDAGVW,IAHU,EAdrB;;cAAA;gBAcQG,IAdR;gBAAA,kBAoBiDA,IAAI,CAACC,IAAL,CAAUA,IApB3D,EAoBUC,YApBV,mBAoBUA,YApBV,EAoBwBC,UApBxB,mBAoBwBA,UApBxB,EAoBoClB,QApBpC,mBAoBoCA,QApBpC;gBAAA;gBAAA,OAqByBN,KAAK,CAACyB,GAAN,CAAUF,YAAV,EAAwB,KAAKpB,KAAL,CAAWC,YAAnC,EAAiD;kBACpEsB,OAAO,EAAE;oBACP,aAAa,aADN;oBAEP,gBAAgB,KAAKvB,KAAL,CAAWC,YAAX,CAAwBuB;kBAFjC;gBAD2D,CAAjD,CArBzB;;cAAA;gBAqBUC,MArBV;;gBAAA,MA2BQA,MAAM,CAACC,MAAP,KAAkB,GA3B1B;kBAAA;kBAAA;gBAAA;;gBA4BM;gBACMC,OA7BZ,GA6BsB,KAAK3B,KAAL,CAAWC,YAAX,CAAwBO,IAAxB,CAA6BoB,WAA7B,CAAyC,GAAzC,CA7BtB;gBA8BMjB,OAAO,CAACkB,GAAR,CACEC,IAAI,CAACC,SAAL,CAAe;kBACbC,gBAAgB,EAAE,KAAKhC,KAAL,CAAWC,YAAX,CAAwBO,IAD7B;kBAEbL,QAAQ,EAARA,QAFa;kBAGb8B,IAAI,EAAE,KAAKjC,KAAL,CAAWC,YAAX,CAAwBgC,IAHjB;kBAIbC,SAAS,EAAE,KAAKlC,KAAL,CAAWC,YAAX,CAAwBO,IAAxB,CAA6B2B,MAA7B,CAAoCR,OAAO,GAAG,CAA9C,CAJE;kBAKbS,QAAQ,EAAE,KAAKpC,KAAL,CAAWC,YAAX,CAAwBuB,IALrB;kBAMbH,UAAU,EAAVA;gBANa,CAAf,CADF;gBA9BN;gBAAA,OAwC6BxB,KAAK,CAACoB,IAAN,WAClB,KAAKjB,KAAL,CAAWI,UADO,mBAErB;kBACE4B,gBAAgB,EAAE,KAAKhC,KAAL,CAAWC,YAAX,CAAwBO,IAD5C;kBAEEL,QAAQ,EAARA,QAFF;kBAGE8B,IAAI,EAAE,KAAKjC,KAAL,CAAWC,YAAX,CAAwBgC,IAHhC;kBAIEC,SAAS,EAAE,KAAKlC,KAAL,CAAWC,YAAX,CAAwBO,IAAxB,CAA6B2B,MAA7B,CAAoCR,OAAO,GAAG,CAA9C,CAJb;kBAKES,QAAQ,EAAE,KAAKpC,KAAL,CAAWC,YAAX,CAAwBuB,IALpC;kBAMEH,UAAU,EAAVA;gBANF,CAFqB,CAxC7B;;cAAA;gBAwCYgB,QAxCZ;gBAmDM1B,OAAO,CAACkB,GAAR,CAAY,UAAZ,EAAwBQ,QAAxB;;cAnDN;gBAAA;gBAAA;;cAAA;gBAAA;gBAAA;gBAwGI1B,OAAO,CAACkB,GAAR;;cAxGJ;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,C;;;;;;;;;;;4FA4GA;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAEIlB,OAAO,CAACkB,GAAR,CAAY,4BAAZ;gBACMS,UAHV,GAGuB,OAAO,IAAP,GAAc,GAHrC,EAG0C;;gBAChCC,QAJV,GAIqB,KAAKvC,KAAL,CAAWC,YAAX,CAAwBgC,IAJ7C;gBAKUO,YALV,GAKyBC,IAAI,CAACC,KAAL,CAAWH,QAAQ,GAAGD,UAAtB,IAAoC,CAL7D;gBAMQK,aANR,GAMwB,EANxB;gBAQQC,gBARR,GAQ2B,EAR3B;gBAUaC,KAVb,GAUqB,CAVrB;;cAAA;gBAAA,MAUwBA,KAAK,GAAGL,YAAY,GAAG,CAV/C;kBAAA;kBAAA;gBAAA;;gBAWMM,KAAK,GAAG,CAACD,KAAK,GAAG,CAAT,IAAcP,UAAtB;gBACAS,GAAG,GAAGF,KAAK,GAAGP,UAAd;gBACAU,IAAI,GACFH,KAAK,GAAGL,YAAR,GACI,KAAKxC,KAAL,CAAWC,YAAX,CAAwBgD,KAAxB,CAA8BH,KAA9B,EAAqCC,GAArC,CADJ,GAEI,KAAK/C,KAAL,CAAWC,YAAX,CAAwBgD,KAAxB,CAA8BH,KAA9B,CAHN,CAbN,CAkBM;;gBAlBN;gBAAA,OAmBmCjD,KAAK,CAACqD,GAAN,WACxB,KAAKlD,KAAL,CAAWI,UADa,sBAE3B;kBACE+C,MAAM,EAAE;oBACNhD,QAAQ,EAAE,KAAKH,KAAL,CAAWG,QADf;oBAENiD,UAAU,EAAEP,KAFN;oBAGN3C,QAAQ,EAAE,KAAKF,KAAL,CAAWE;kBAHf;gBADV,CAF2B,CAnBnC;;cAAA;gBAmBUmD,gBAnBV;gBA8BYjC,YA9BZ,GA8B6BiC,gBAAgB,CAAClC,IA9B9C,CA8BYC,YA9BZ,EA+BM;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;gBAEA;;gBAxCN;gBAAA,OAyC6BvB,KAAK,CAACyB,GAAN,CAAUF,YAAV,EAAwB4B,IAAxB,EAA8B;kBACnDzB,OAAO,EAAE;oBACP,gBAAgB,KAAKvB,KAAL,CAAWC,YAAX,CAAwBuB,IADjC;oBAEP,aAAa;kBAFN;gBAD0C,CAA9B,CAzC7B;;cAAA;gBAyCU8B,UAzCV;;gBA+CM,IAAIA,UAAJ,EAAgB;kBACd3C,OAAO,CAACkB,GAAR,CAAYyB,UAAZ,EADc,CAEd;gBACD,CAlDP,CAmDM;;;cAnDN;gBAUkDT,KAAK,EAVvD;gBAAA;gBAAA;;cAAA;gBAAA;gBAAA,OAsD8BU,OAAO,CAACC,GAAR,CAAYb,aAAZ,CAtD9B;;cAAA;gBAsDQc,aAtDR;gBAAA;gBAAA,OAmEmC5D,KAAK,CAACoB,IAAN,WAC1B,KAAKjB,KAAL,CAAWI,UADe,uBAE7B;kBACE+C,MAAM,EAAE;oBACNhD,QAAQ,EAAE,KAAKH,KAAL,CAAWG,QADf;oBAENuD,KAAK,EAAEd,gBAFD;oBAGN1C,QAAQ,EAAE,KAAKF,KAAL,CAAWE;kBAHf;gBADV,CAF6B,CAnEnC;;cAAA;gBAmEQyD,kBAnER;gBA8EIhD,OAAO,CAACkB,GAAR,CAAY8B,kBAAkB,CAACxC,IAA/B,EAAqC,0BAArC;gBA9EJ;gBAAA;;cAAA;gBAAA;gBAAA;gBAgFIR,OAAO,CAACkB,GAAR;;cAhFJ;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,C;;;;;;;;;;;gFAoFA;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA,OACqBhC,KAAK,CAACqD,GAAN,WACd,KAAKlD,KAAL,CAAWI,UADG,2CADrB;;cAAA;gBACQc,IADR;gBAIEP,OAAO,CAACkB,GAAR,CAAYX,IAAZ;;cAJF;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,C;;;;;;;;;;WAOA,6BAAoB,CAClB;IACD;;;WACD,kBAAS;MACP,OACE;QAAK,KAAK,EAAE;UAAE0C,eAAe,EAAE,MAAnB;UAA2BC,MAAM,EAAE;QAAnC,CAAZ;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,GACE;QAAM,QAAQ,EAAE,KAAKC,WAAL,CAAiBC,IAAjB,CAAsB,IAAtB,CAAhB;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,GACE;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,GACE;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,qBADF,EAEE;QACE,IAAI,EAAC,MADP;QAEE,EAAE,EAAC,MAFL;QAGE,QAAQ,EAAE,KAAKC,WAAL,CAAiBD,IAAjB,CAAsB,IAAtB,CAHZ;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,EAFF,EAOE;QAAQ,IAAI,EAAC,QAAb;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,YAPF,CADF,CADF,CADF;IAeD;;;;EAhPgCnE,S;;SAAdE,K"},"metadata":{},"sourceType":"module"}