{"ast":null,"code":"var _jsxFileName = \"/Users/macos/Documents/learn/aws-upload/aws-s3-multipart-upload/frontend/pages/index.js\";\nvar __jsx = React.createElement;\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\nexport default class Index extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      fileSelected: null,\n      uploadId: \"\",\n      fileName: \"\",\n      backendUrl: \"http://localhost:3001\"\n    };\n  }\n\n  async fileHandler(event) {\n    try {\n      let fileSelected = event.target.files[0];\n      let fileName = fileSelected.name;\n      this.setState({\n        fileSelected\n      });\n      this.setState({\n        fileName\n      });\n    } catch (err) {\n      console.error(err, err.message);\n    }\n  }\n\n  async startUpload(event) {\n    try {\n      event.preventDefault();\n      const params = {\n        fileName: this.state.fileName,\n        fileType: this.state.fileSelected.type\n      }; // let resp = await axios.get(`${this.state.backendUrl}/start-upload`, {\n      //   params,\n      // });\n\n      let resp = await axios.get(`${this.state.backendUrl}/start-upload-signal`, {\n        params\n      });\n      let {\n        url\n      } = resp.data;\n      console.log(url); // this.setState({ uploadId });\n      // this.uploadMultipartFile();\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  async uploadMultipartFile() {\n    try {\n      console.log(\"Inside uploadMultipartFile\");\n      const CHUNK_SIZE = 100000000; // 100MB\n\n      const fileSize = this.state.fileSelected.size;\n      const CHUNKS_COUNT = Math.floor(fileSize / CHUNK_SIZE) + 1;\n      let promisesArray = [];\n      let start, end, blob;\n\n      for (let index = 1; index < CHUNKS_COUNT + 1; index++) {\n        start = (index - 1) * CHUNK_SIZE;\n        end = index * CHUNK_SIZE;\n        blob = index < CHUNKS_COUNT ? this.state.fileSelected.slice(start, end) : this.state.fileSelected.slice(start); // Get presigned URL for each part\n\n        let getUploadUrlResp = await axios.get(`${this.state.backendUrl}/get-upload-url`, {\n          params: {\n            fileName: this.state.fileName,\n            partNumber: index,\n            uploadId: this.state.uploadId\n          }\n        });\n        let {\n          presignedUrl\n        } = getUploadUrlResp.data;\n        console.log(\"   Presigned URL \" + index + \": \" + presignedUrl + \" filetype \" + this.state.fileSelected.type); // Send part aws server\n\n        let uploadResp = axios.put(presignedUrl, blob, {\n          headers: {\n            \"Content-Type\": this.state.fileSelected.type,\n            \"Access-Control-Allow-Origin\": \"*\"\n          }\n        });\n        promisesArray.push(uploadResp);\n      }\n\n      let resolvedArray = await Promise.all(promisesArray);\n      console.log(resolvedArray, \" resolvedAr\");\n      let uploadPartsArray = [];\n      resolvedArray.forEach((resolvedPromise, index) => {\n        uploadPartsArray.push({\n          ETag: resolvedPromise.headers.etag,\n          PartNumber: index + 1\n        });\n      }); // CompleteMultipartUpload in the backend server\n\n      let completeUploadResp = await axios.post(`${this.state.backendUrl}/complete-upload`, {\n        params: {\n          fileName: this.state.fileName,\n          parts: uploadPartsArray,\n          uploadId: this.state.uploadId\n        }\n      });\n      console.log(completeUploadResp.data, \"complete upload response\");\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  componentDidUpdate() {\n    console.log(this.state);\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      style: {\n        backgroundColor: \"grey\",\n        height: 1500\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 7\n      }\n    }, __jsx(\"form\", {\n      onSubmit: this.startUpload.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }\n    }, __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 11\n      }\n    }, __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 13\n      }\n    }, \"Upload Dataset:\"), __jsx(\"input\", {\n      type: \"file\",\n      id: \"file\",\n      onChange: this.fileHandler.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 13\n      }\n    }), __jsx(\"button\", {\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 13\n      }\n    }, \"Upload\"))));\n  }\n\n}","map":{"version":3,"names":["React","Component","axios","Index","constructor","props","state","fileSelected","uploadId","fileName","backendUrl","fileHandler","event","target","files","name","setState","err","console","error","message","startUpload","preventDefault","params","fileType","type","resp","get","url","data","log","uploadMultipartFile","CHUNK_SIZE","fileSize","size","CHUNKS_COUNT","Math","floor","promisesArray","start","end","blob","index","slice","getUploadUrlResp","partNumber","presignedUrl","uploadResp","put","headers","push","resolvedArray","Promise","all","uploadPartsArray","forEach","resolvedPromise","ETag","etag","PartNumber","completeUploadResp","post","parts","componentDidUpdate","render","backgroundColor","height","bind"],"sources":["/Users/macos/Documents/learn/aws-upload/aws-s3-multipart-upload/frontend/pages/index.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport axios from \"axios\";\n\nexport default class Index extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      fileSelected: null,\n      uploadId: \"\",\n      fileName: \"\",\n      backendUrl: \"http://localhost:3001\",\n    };\n  }\n\n  async fileHandler(event) {\n    try {\n      let fileSelected = event.target.files[0];\n      let fileName = fileSelected.name;\n      this.setState({ fileSelected });\n      this.setState({ fileName });\n    } catch (err) {\n      console.error(err, err.message);\n    }\n  }\n\n  async startUpload(event) {\n    try {\n      event.preventDefault();\n      const params = {\n        fileName: this.state.fileName,\n        fileType: this.state.fileSelected.type,\n      };\n\n      // let resp = await axios.get(`${this.state.backendUrl}/start-upload`, {\n      //   params,\n      // });\n      let resp = await axios.get(`${this.state.backendUrl}/start-upload-signal`, {\n        params,\n      });\n      let { url } = resp.data;\n      console.log(url)\n      // this.setState({ uploadId });\n      // this.uploadMultipartFile();\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  async uploadMultipartFile() {\n    try {\n      console.log(\"Inside uploadMultipartFile\");\n      const CHUNK_SIZE = 100000000; // 100MB\n      const fileSize = this.state.fileSelected.size;\n      const CHUNKS_COUNT = Math.floor(fileSize / CHUNK_SIZE) + 1;\n      let promisesArray = [];\n      let start, end, blob;\n\n      for (let index = 1; index < CHUNKS_COUNT + 1; index++) {\n        start = (index - 1) * CHUNK_SIZE;\n        end = index * CHUNK_SIZE;\n        blob =\n          index < CHUNKS_COUNT\n            ? this.state.fileSelected.slice(start, end)\n            : this.state.fileSelected.slice(start);\n\n        // Get presigned URL for each part\n        let getUploadUrlResp = await axios.get(\n          `${this.state.backendUrl}/get-upload-url`,\n          {\n            params: {\n              fileName: this.state.fileName,\n              partNumber: index,\n              uploadId: this.state.uploadId,\n            },\n          }\n        );\n\n        let { presignedUrl } = getUploadUrlResp.data;\n        console.log(\n          \"   Presigned URL \" +\n            index +\n            \": \" +\n            presignedUrl +\n            \" filetype \" +\n            this.state.fileSelected.type\n        );\n\n        // Send part aws server\n        let uploadResp = axios.put(presignedUrl, blob, {\n          headers: {\n            \"Content-Type\": this.state.fileSelected.type,\n            \"Access-Control-Allow-Origin\": \"*\"\n          },\n        });\n        promisesArray.push(uploadResp);\n      }\n\n      let resolvedArray = await Promise.all(promisesArray);\n      console.log(resolvedArray, \" resolvedAr\");\n\n      let uploadPartsArray = [];\n      resolvedArray.forEach((resolvedPromise, index) => {\n        uploadPartsArray.push({\n          ETag: resolvedPromise.headers.etag,\n          PartNumber: index + 1,\n        });\n      });\n\n      // CompleteMultipartUpload in the backend server\n      let completeUploadResp = await axios.post(\n        `${this.state.backendUrl}/complete-upload`,\n        {\n          params: {\n            fileName: this.state.fileName,\n            parts: uploadPartsArray,\n            uploadId: this.state.uploadId,\n          },\n        }\n      );\n\n      console.log(completeUploadResp.data, \"complete upload response\");\n    } catch (err) {\n      console.log(err);\n    }\n  }\n  componentDidUpdate() {\n    console.log(this.state);\n  }\n  render() {\n    return (\n      <div style={{ backgroundColor: \"grey\", height: 1500 }}>\n        <form onSubmit={this.startUpload.bind(this)}>\n          <div>\n            <p>Upload Dataset:</p>\n            <input\n              type=\"file\"\n              id=\"file\"\n              onChange={this.fileHandler.bind(this)}\n            />\n            <button type=\"submit\">Upload</button>\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}