{"ast":null,"code":"var _jsxFileName = \"/Users/macos/Documents/learn/aws-upload/aws-s3-multipart-upload/frontend/pages/index.js\";\nvar __jsx = React.createElement;\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\nexport default class Index extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      fileSelected: null,\n      uploadId: \"\",\n      fileName: \"\",\n      backendUrl: \"http://localhost:3000\"\n    };\n  }\n\n  async fileHandler(event) {\n    try {\n      let fileSelected = event.target.files[0];\n      let fileName = fileSelected.name;\n      this.setState({\n        fileSelected\n      });\n      this.setState({\n        fileName\n      });\n    } catch (err) {\n      console.error(err, err.message);\n    }\n  }\n\n  async startUpload(event) {\n    try {\n      event.preventDefault();\n      const params = {\n        videoName: this.state.fileName,\n        fileType: this.state.fileSelected.type\n      };\n      let resp = await axios.get(`${this.state.backendUrl}/api/get-upload-id`, {\n        params\n      });\n      console.log(resp);\n      let {\n        uploadId\n      } = resp.data;\n      console.log(uploadId);\n      this.setState({\n        uploadId\n      }); // this.uploadMultipartFile();\n      // let resp = await axios.delete(\n      //   `${this.state.backendUrl}/api/v1/file/62c3b627d34caccddce9dbad`\n      // );\n      // console.log(resp)\n      // const body = {\n      //   fileName: this.state.fileName,\n      //   // fileType: this.state.fileSelected.type,\n      //   path: \"courses\",\n      // };\n      // let resp = await axios.post(\n      //   `${this.state.backendUrl}/api/v1/file/presigned-url`,\n      //   {\n      //     ...body,\n      //   }\n      // );\n      // let { presignedUrl, storageKey, fileName } = resp.data.data;\n      // const result = await axios.put(presignedUrl, this.state.fileSelected, {\n      //   headers: {\n      //     \"x-amz-acl\": \"public-read\",\n      //     \"Content-Type\": this.state.fileSelected.type,\n      //   },\n      // });\n      // if (result.status === 200) {\n      //   // console.log(this.state.fileSelected);\n      //   const lastDot = this.state.fileSelected.name.lastIndexOf(\".\");\n      //   console.log(\n      //     JSON.stringify({\n      //       originalFileName: this.state.fileSelected.name,\n      //       fileName,\n      //       size: this.state.fileSelected.size,\n      //       extension: this.state.fileSelected.name.substr(lastDot + 1),\n      //       mimetype: this.state.fileSelected.type,\n      //       storageKey,\n      //     })\n      //   );\n      //   const response = await axios.post(\n      //     `${this.state.backendUrl}/api/v1/file`,\n      //     {\n      //       originalFileName: this.state.fileSelected.name,\n      //       fileName,\n      //       size: this.state.fileSelected.size,\n      //       extension: this.state.fileSelected.name.substr(lastDot + 1),\n      //       mimetype: this.state.fileSelected.type,\n      //       storageKey,\n      //     }\n      //   );\n      //   console.log(\"response\", response);\n      // }\n      // let uploadResp = await axios.put(presignedUrl, blob, {\n      //   headers: {\n      //     \"Content-Type\": this.state.fileSelected.type,\n      //   },\n      // });\n      // this.setState({ uploadId });\n      // this.uploadMultipartFile();\n      // event.preventDefault();\n      // const params = {\n      //   fileName: this.state.fileName,\n      //   fileType: this.state.fileSelected.type,\n      // };\n      // let resp = await axios.get(`${this.state.backendUrl}/start-upload`, {\n      //   params,\n      // });\n      // console.log(\"resp\", resp);\n      // let { uploadId } = resp.data;\n      // this.setState({ uploadId });\n      // this.uploadMultipartFile();\n\n      /**\n       event.preventDefault();\n      const params = {\n        fileName: this.state.fileName,\n        fileType: this.state.fileSelected.type,\n      };\n       // let resp = await axios.get(`${this.state.backendUrl}/start-upload`, {\n      //   params,\n      // });\n      let resp = await axios.get(\n        `${this.state.backendUrl}/start-upload-signal`,\n        {\n          params,\n        }\n      );\n      let { url } = resp.data;\n      console.log(url);\n      const result = await axios.put(url, this.state.fileSelected, {\n        headers: {\n          \"x-amz-acl\": \"public-read\",\n          \"Content-Type\": this.state.fileSelected.type,\n          \"Access-Control-Allow-Origin\": \"*\"\n        },\n      });\n      console.log(result)\n      // this.setState({ uploadId });\n      // this.uploadMultipartFile();\n       */\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  async uploadMultipartFile() {\n    try {\n      console.log(\"Inside uploadMultipartFile\");\n      const CHUNK_SIZE = 1024 * 1000 * 300; // 300MB\n\n      const fileSize = this.state.fileSelected.size;\n      const CHUNKS_COUNT = Math.floor(fileSize / CHUNK_SIZE) + 1;\n      let promisesArray = [];\n      let start, end, blob;\n      let uploadPartsArray = [];\n\n      for (let index = 1; index < CHUNKS_COUNT + 1; index++) {\n        start = (index - 1) * CHUNK_SIZE;\n        end = index * CHUNK_SIZE;\n        blob = index < CHUNKS_COUNT ? this.state.fileSelected.slice(start, end) : this.state.fileSelected.slice(start); // Get presigned URL for each part\n\n        let getUploadUrlResp = await axios.get(`${this.state.backendUrl}/get-upload-url`, {\n          params: {\n            fileName: this.state.fileName,\n            partNumber: index,\n            uploadId: this.state.uploadId\n          }\n        });\n        let {\n          presignedUrl\n        } = getUploadUrlResp.data;\n        console.log(presignedUrl); // console.log(\n        //   \"   Presigned URL \" +\n        //     index +\n        //     \": \" +\n        //     presignedUrl +\n        //     \" filetype \" +\n        //     this.state.fileSelected.type\n        // );\n        // Send part aws server\n\n        let uploadResp = await axios.put(presignedUrl, blob, {\n          headers: {\n            \"Content-Type\": this.state.fileSelected.type // \"x-amz-acl\": \"public-read\",\n\n          }\n        });\n\n        if (uploadResp) {\n          // console.log(uploadResp)\n          uploadPartsArray.push({\n            ETag: uploadResp.headers.etag,\n            PartNumber: index\n          });\n        } // promisesArray.push(uploadResp);v\n\n      }\n\n      console.log(uploadPartsArray); // let resolvedArray = await Promise.all(promisesArray);\n      // console.log(resolvedArray, \" resolvedAr\");\n      // let uploadPartsArray = [];\n      // resolvedArray.forEach((resolvedPromise, index) => {\n      //   console.log(\"resolvedPromise\", resolvedPromise);\n      //   uploadPartsArray.push({\n      //     ETag: resolvedPromise.headers.etag,\n      //     PartNumber: index + 1,\n      //   });\n      // });\n      // CompleteMultipartUpload in the backend server\n\n      let completeUploadResp = await axios.post(`${this.state.backendUrl}/complete-upload`, {\n        params: {\n          fileName: this.state.fileName,\n          parts: uploadPartsArray,\n          uploadId: this.state.uploadId\n        }\n      });\n      console.log(completeUploadResp.data, \"complete upload response\");\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  async getData() {\n    const resp = await axios.get(`${this.state.backendUrl}/api/v1/file/62c3b627d34caccddce9dbad`);\n    console.log(resp);\n  }\n\n  componentDidMount() {// this.getData();\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      style: {\n        backgroundColor: \"grey\",\n        height: 1500\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 7\n      }\n    }, __jsx(\"form\", {\n      onSubmit: this.startUpload.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 9\n      }\n    }, __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 11\n      }\n    }, __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 13\n      }\n    }, \"Upload Dataset:\"), __jsx(\"input\", {\n      type: \"file\",\n      id: \"file\",\n      onChange: this.fileHandler.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 13\n      }\n    }), __jsx(\"button\", {\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 13\n      }\n    }, \"Upload\"))));\n  }\n\n}","map":{"version":3,"names":["React","Component","axios","Index","constructor","props","state","fileSelected","uploadId","fileName","backendUrl","fileHandler","event","target","files","name","setState","err","console","error","message","startUpload","preventDefault","params","videoName","fileType","type","resp","get","log","data","uploadMultipartFile","CHUNK_SIZE","fileSize","size","CHUNKS_COUNT","Math","floor","promisesArray","start","end","blob","uploadPartsArray","index","slice","getUploadUrlResp","partNumber","presignedUrl","uploadResp","put","headers","push","ETag","etag","PartNumber","completeUploadResp","post","parts","getData","componentDidMount","render","backgroundColor","height","bind"],"sources":["/Users/macos/Documents/learn/aws-upload/aws-s3-multipart-upload/frontend/pages/index.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport axios from \"axios\";\n\nexport default class Index extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      fileSelected: null,\n      uploadId: \"\",\n      fileName: \"\",\n      backendUrl: \"http://localhost:3000\",\n    };\n  }\n\n  async fileHandler(event) {\n    try {\n      let fileSelected = event.target.files[0];\n      let fileName = fileSelected.name;\n      this.setState({ fileSelected });\n      this.setState({ fileName });\n    } catch (err) {\n      console.error(err, err.message);\n    }\n  }\n\n  async startUpload(event) {\n    try {\n      event.preventDefault();\n\n      const params = {\n        videoName: this.state.fileName,\n        fileType: this.state.fileSelected.type,\n      };\n\n      let resp = await axios.get(`${this.state.backendUrl}/api/get-upload-id`, {\n        params,\n      });\n      console.log(resp);\n      let { uploadId } = resp.data;\n      console.log(uploadId)\n      this.setState({ uploadId });\n      // this.uploadMultipartFile();\n\n      // let resp = await axios.delete(\n      //   `${this.state.backendUrl}/api/v1/file/62c3b627d34caccddce9dbad`\n      // );\n      // console.log(resp)\n      // const body = {\n      //   fileName: this.state.fileName,\n      //   // fileType: this.state.fileSelected.type,\n      //   path: \"courses\",\n      // };\n\n      // let resp = await axios.post(\n      //   `${this.state.backendUrl}/api/v1/file/presigned-url`,\n      //   {\n      //     ...body,\n      //   }\n      // );\n      // let { presignedUrl, storageKey, fileName } = resp.data.data;\n      // const result = await axios.put(presignedUrl, this.state.fileSelected, {\n      //   headers: {\n      //     \"x-amz-acl\": \"public-read\",\n      //     \"Content-Type\": this.state.fileSelected.type,\n      //   },\n      // });\n      // if (result.status === 200) {\n      //   // console.log(this.state.fileSelected);\n      //   const lastDot = this.state.fileSelected.name.lastIndexOf(\".\");\n      //   console.log(\n      //     JSON.stringify({\n      //       originalFileName: this.state.fileSelected.name,\n      //       fileName,\n      //       size: this.state.fileSelected.size,\n      //       extension: this.state.fileSelected.name.substr(lastDot + 1),\n      //       mimetype: this.state.fileSelected.type,\n      //       storageKey,\n      //     })\n      //   );\n      //   const response = await axios.post(\n      //     `${this.state.backendUrl}/api/v1/file`,\n      //     {\n      //       originalFileName: this.state.fileSelected.name,\n      //       fileName,\n      //       size: this.state.fileSelected.size,\n      //       extension: this.state.fileSelected.name.substr(lastDot + 1),\n      //       mimetype: this.state.fileSelected.type,\n      //       storageKey,\n      //     }\n      //   );\n      //   console.log(\"response\", response);\n      // }\n\n      // let uploadResp = await axios.put(presignedUrl, blob, {\n      //   headers: {\n      //     \"Content-Type\": this.state.fileSelected.type,\n      //   },\n      // });\n      // this.setState({ uploadId });\n      // this.uploadMultipartFile();\n      // event.preventDefault();\n      // const params = {\n      //   fileName: this.state.fileName,\n      //   fileType: this.state.fileSelected.type,\n      // };\n\n      // let resp = await axios.get(`${this.state.backendUrl}/start-upload`, {\n      //   params,\n      // });\n      // console.log(\"resp\", resp);\n      // let { uploadId } = resp.data;\n      // this.setState({ uploadId });\n      // this.uploadMultipartFile();\n      /**\n       event.preventDefault();\n      const params = {\n        fileName: this.state.fileName,\n        fileType: this.state.fileSelected.type,\n      };\n\n      // let resp = await axios.get(`${this.state.backendUrl}/start-upload`, {\n      //   params,\n      // });\n      let resp = await axios.get(\n        `${this.state.backendUrl}/start-upload-signal`,\n        {\n          params,\n        }\n      );\n      let { url } = resp.data;\n      console.log(url);\n      const result = await axios.put(url, this.state.fileSelected, {\n        headers: {\n          \"x-amz-acl\": \"public-read\",\n          \"Content-Type\": this.state.fileSelected.type,\n          \"Access-Control-Allow-Origin\": \"*\"\n        },\n      });\n      console.log(result)\n      // this.setState({ uploadId });\n      // this.uploadMultipartFile();\n       */\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  async uploadMultipartFile() {\n    try {\n      console.log(\"Inside uploadMultipartFile\");\n      const CHUNK_SIZE = 1024 * 1000 * 300; // 300MB\n      const fileSize = this.state.fileSelected.size;\n      const CHUNKS_COUNT = Math.floor(fileSize / CHUNK_SIZE) + 1;\n      let promisesArray = [];\n      let start, end, blob;\n      let uploadPartsArray = [];\n\n      for (let index = 1; index < CHUNKS_COUNT + 1; index++) {\n        start = (index - 1) * CHUNK_SIZE;\n        end = index * CHUNK_SIZE;\n        blob =\n          index < CHUNKS_COUNT\n            ? this.state.fileSelected.slice(start, end)\n            : this.state.fileSelected.slice(start);\n\n        // Get presigned URL for each part\n        let getUploadUrlResp = await axios.get(\n          `${this.state.backendUrl}/get-upload-url`,\n          {\n            params: {\n              fileName: this.state.fileName,\n              partNumber: index,\n              uploadId: this.state.uploadId,\n            },\n          }\n        );\n\n        let { presignedUrl } = getUploadUrlResp.data;\n        console.log(presignedUrl);\n        // console.log(\n        //   \"   Presigned URL \" +\n        //     index +\n        //     \": \" +\n        //     presignedUrl +\n        //     \" filetype \" +\n        //     this.state.fileSelected.type\n        // );\n\n        // Send part aws server\n        let uploadResp = await axios.put(presignedUrl, blob, {\n          headers: {\n            \"Content-Type\": this.state.fileSelected.type,\n            // \"x-amz-acl\": \"public-read\",\n          },\n        });\n        if (uploadResp) {\n          // console.log(uploadResp)\n          uploadPartsArray.push({\n            ETag: uploadResp.headers.etag,\n            PartNumber: index,\n          });\n        }\n        // promisesArray.push(uploadResp);v\n      }\n      console.log(uploadPartsArray);\n\n      // let resolvedArray = await Promise.all(promisesArray);\n      // console.log(resolvedArray, \" resolvedAr\");\n\n      // let uploadPartsArray = [];\n      // resolvedArray.forEach((resolvedPromise, index) => {\n      //   console.log(\"resolvedPromise\", resolvedPromise);\n      //   uploadPartsArray.push({\n      //     ETag: resolvedPromise.headers.etag,\n      //     PartNumber: index + 1,\n      //   });\n      // });\n\n      // CompleteMultipartUpload in the backend server\n      let completeUploadResp = await axios.post(\n        `${this.state.backendUrl}/complete-upload`,\n        {\n          params: {\n            fileName: this.state.fileName,\n            parts: uploadPartsArray,\n            uploadId: this.state.uploadId,\n          },\n        }\n      );\n\n      console.log(completeUploadResp.data, \"complete upload response\");\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  async getData() {\n    const resp = await axios.get(\n      `${this.state.backendUrl}/api/v1/file/62c3b627d34caccddce9dbad`\n    );\n    console.log(resp);\n  }\n\n  componentDidMount() {\n    // this.getData();\n  }\n  render() {\n    return (\n      <div style={{ backgroundColor: \"grey\", height: 1500 }}>\n        <form onSubmit={this.startUpload.bind(this)}>\n          <div>\n            <p>Upload Dataset:</p>\n            <input\n              type=\"file\"\n              id=\"file\"\n              onChange={this.fileHandler.bind(this)}\n            />\n            <button type=\"submit\">Upload</button>\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}