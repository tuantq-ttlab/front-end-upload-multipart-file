{"ast":null,"code":"var _jsxFileName = \"/Users/macos/Documents/learn/aws-upload/aws-s3-multipart-upload/frontend/pages/index.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\nexport default class Index extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      fileSelected: null,\n      uploadId: \"\",\n      fileName: \"\",\n      backendUrl: \"http://localhost:3000\"\n    };\n  }\n\n  async fileHandler(event) {\n    try {\n      let fileSelected = event.target.files[0];\n      let fileName = fileSelected.name;\n      this.setState({\n        fileSelected\n      });\n      this.setState({\n        fileName\n      });\n    } catch (err) {\n      console.error(err, err.message);\n    }\n  }\n\n  async startUpload(event) {\n    try {\n      var _resp$data;\n\n      event.preventDefault();\n      const params = {\n        videoName: this.state.fileName\n      };\n      let resp = await axios.post(`${this.state.backendUrl}/api/shz/get-upload-id`, {}, {\n        data: _objectSpread({}, params)\n      });\n      console.log(resp);\n      let {\n        uploadId\n      } = (_resp$data = resp.data) === null || _resp$data === void 0 ? void 0 : _resp$data.data;\n      console.log(\"uploadId\", uploadId);\n      this.setState({\n        uploadId\n      });\n      this.uploadMultipartFile();\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  async uploadMultipartFile() {\n    try {\n      const CHUNK_SIZE = 1024 * 1000 * 20; // 20MB\n\n      const fileSize = this.state.fileSelected.size;\n      const CHUNKS_COUNT = Math.floor(fileSize / CHUNK_SIZE) + 1;\n      let promisesArray = [];\n      let start, end, blob;\n\n      for (let index = 1; index < CHUNKS_COUNT + 1; index++) {\n        start = (index - 1) * CHUNK_SIZE;\n        end = index * CHUNK_SIZE;\n        blob = index < CHUNKS_COUNT ? this.state.fileSelected.slice(start, end) : this.state.fileSelected.slice(start); // Get presigned URL for each part\n\n        let getUploadUrlResp = await axios.post(`${this.state.backendUrl}/api/shz/get-upload-url`, {}, {\n          data: {\n            videoName: this.state.fileName,\n            partNumber: index,\n            uploadId: this.state.uploadId\n          }\n        });\n        let {\n          url: presignedUrl\n        } = getUploadUrlResp.data.data;\n        console.log(`PresignedUrl ${index}`, presignedUrl);\n        let uploadResp = axios.put(presignedUrl, blob, {\n          headers: {\n            'Content-Type': this.state.fileSelected.type\n          }\n        });\n        promisesArray.push(uploadResp);\n      }\n\n      let resolvedArray = await Promise.all(promisesArray);\n      console.log(resolvedArray, ' resolvedAr');\n      let uploadPartsArray = [];\n      resolvedArray.forEach((resolvedPromise, index) => {\n        uploadPartsArray.push({\n          ETag: resolvedPromise.headers.etag,\n          PartNumber: index + 1\n        });\n      });\n      console.log(uploadPartsArray);\n      let completeUploadResp = await axios.post(`${this.state.backendUrl}/api/shz/complete-upload`, {}, {\n        data: {\n          videoName: this.state.fileName,\n          parts: uploadPartsArray,\n          uploadId: this.state.uploadId\n        }\n      });\n      console.log(completeUploadResp.data, \"complete upload response\");\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  async getData() {\n    const resp = await axios.get(`${this.state.backendUrl}/api/v1/file/62c3b627d34caccddce9dbad`);\n    console.log(resp);\n  }\n\n  componentDidMount() {// this.getData();\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      style: {\n        backgroundColor: \"grey\",\n        height: 1500\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 7\n      }\n    }, __jsx(\"form\", {\n      onSubmit: this.startUpload.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }\n    }, __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 11\n      }\n    }, __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 13\n      }\n    }, \"Upload Dataset:\"), __jsx(\"input\", {\n      type: \"file\",\n      id: \"file\",\n      onChange: this.fileHandler.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 13\n      }\n    }), __jsx(\"button\", {\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 13\n      }\n    }, \"Upload\"))));\n  }\n\n}","map":{"version":3,"names":["React","Component","axios","Index","constructor","props","state","fileSelected","uploadId","fileName","backendUrl","fileHandler","event","target","files","name","setState","err","console","error","message","startUpload","preventDefault","params","videoName","resp","post","data","log","uploadMultipartFile","CHUNK_SIZE","fileSize","size","CHUNKS_COUNT","Math","floor","promisesArray","start","end","blob","index","slice","getUploadUrlResp","partNumber","url","presignedUrl","uploadResp","put","headers","type","push","resolvedArray","Promise","all","uploadPartsArray","forEach","resolvedPromise","ETag","etag","PartNumber","completeUploadResp","parts","getData","get","componentDidMount","render","backgroundColor","height","bind"],"sources":["/Users/macos/Documents/learn/aws-upload/aws-s3-multipart-upload/frontend/pages/index.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport axios from \"axios\";\n\nexport default class Index extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      fileSelected: null,\n      uploadId: \"\",\n      fileName: \"\",\n      backendUrl: \"http://localhost:3000\",\n    };\n  }\n\n  async fileHandler(event) {\n    try {\n      let fileSelected = event.target.files[0];\n      let fileName = fileSelected.name;\n      this.setState({ fileSelected });\n      this.setState({ fileName });\n    } catch (err) {\n      console.error(err, err.message);\n    }\n  }\n\n  async startUpload(event) {\n    try {\n      event.preventDefault();\n\n      const params = {\n        videoName: this.state.fileName,\n      };\n\n      let resp = await axios.post(\n        `${this.state.backendUrl}/api/shz/get-upload-id`,\n        {},\n        {\n          data: { ...params },\n        }\n      );\n      console.log(resp);\n      let { uploadId } = resp.data?.data;\n      console.log(\"uploadId\", uploadId);\n      this.setState({ uploadId });\n      this.uploadMultipartFile();\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  async uploadMultipartFile() {\n    try {\n      const CHUNK_SIZE = 1024 * 1000 * 20; // 20MB\n      const fileSize = this.state.fileSelected.size;\n      const CHUNKS_COUNT = Math.floor(fileSize / CHUNK_SIZE) + 1;\n      let promisesArray = [];\n      let start, end, blob;\n\n      for (let index = 1; index < CHUNKS_COUNT + 1; index++) {\n        start = (index - 1) * CHUNK_SIZE;\n        end = index * CHUNK_SIZE;\n        blob =\n          index < CHUNKS_COUNT\n            ? this.state.fileSelected.slice(start, end)\n            : this.state.fileSelected.slice(start);\n\n        // Get presigned URL for each part\n        let getUploadUrlResp = await axios.post(\n          `${this.state.backendUrl}/api/shz/get-upload-url`,\n          {},\n          {\n            data: {\n              videoName: this.state.fileName,\n              partNumber: index,\n              uploadId: this.state.uploadId,\n            },\n          }\n        );\n        let { url: presignedUrl } = getUploadUrlResp.data.data;\n\n        console.log(`PresignedUrl ${index}`, presignedUrl)\n \n        let uploadResp = axios.put(presignedUrl, blob, {\n          headers: {\n            'Content-Type': this.state.fileSelected.type\n          }\n        });\n        promisesArray.push(uploadResp)\n      }\n      \n      let resolvedArray = await Promise.all(promisesArray)\n      console.log(resolvedArray, ' resolvedAr')\n\n      let uploadPartsArray = []\n      resolvedArray.forEach((resolvedPromise, index) => {\n        uploadPartsArray.push({\n          ETag: resolvedPromise.headers.etag,\n          PartNumber: index + 1\n        })\n      })\n      console.log(uploadPartsArray)\n\n      let completeUploadResp = await axios.post(\n        `${this.state.backendUrl}/api/shz/complete-upload`,\n        {},\n        {\n          data: {\n            videoName: this.state.fileName,\n            parts: uploadPartsArray,\n            uploadId: this.state.uploadId,\n          },\n        }\n      );\n\n      console.log(completeUploadResp.data, \"complete upload response\");\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  async getData() {\n    const resp = await axios.get(\n      `${this.state.backendUrl}/api/v1/file/62c3b627d34caccddce9dbad`\n    );\n    console.log(resp);\n  }\n\n  componentDidMount() {\n    // this.getData();\n  }\n  render() {\n    return (\n      <div style={{ backgroundColor: \"grey\", height: 1500 }}>\n        <form onSubmit={this.startUpload.bind(this)}>\n          <div>\n            <p>Upload Dataset:</p>\n            <input\n              type=\"file\"\n              id=\"file\"\n              onChange={this.fileHandler.bind(this)}\n            />\n            <button type=\"submit\">Upload</button>\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}